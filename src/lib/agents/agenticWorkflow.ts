import { TaskProcessorAgent } from "./taskProcessorAgent";
import { InformationSearchAgent } from "./informationSearchAgent";
import { DocumentQueryAgent } from "./documentQueryAgent";
import { ChatOpenAI } from "@langchain/openai";
import { ChatPromptTemplate } from "@langchain/core/prompts";

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

interface AgenticWorkflowInput {
  task: string;
  stepType: string;
  sessionData?: any;
  context?: string;
}

interface AgenticWorkflowOutput {
  result: string;
  confidence: number;
  sourcesUsed: string[];
  processingSteps: string[];
}

export class AgenticWorkflow {
  private taskProcessor: TaskProcessorAgent;
  private informationSearcher: InformationSearchAgent;
  private documentQuerier: DocumentQueryAgent;
  private finalProcessor: ChatOpenAI;

  constructor() {
    this.taskProcessor = new TaskProcessorAgent();
    this.informationSearcher = new InformationSearchAgent();
    this.documentQuerier = new DocumentQueryAgent();
    this.finalProcessor = new ChatOpenAI({
      model: "gpt-4o",
      temperature: 0.7,
      openAIApiKey: OPENAI_API_KEY,
    });
  }

  async executeWorkflow(input: AgenticWorkflowInput): Promise<AgenticWorkflowOutput> {
    console.log("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Agentic Workflow...");
    console.log("üìã ‡∏á‡∏≤‡∏ô:", input.task);
    console.log("üîÑ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô:", input.stepType);

    const processingSteps: string[] = [];
    const sourcesUsed: string[] = [];
    let confidence = 0;

    try {
      // Step 1: Task Processing and Analysis
      console.log("\n=== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏á‡∏≤‡∏ô ===");
      processingSteps.push("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô");
      
      const taskAnalysis = await this.taskProcessor.processTask({
        task: input.task,
        stepType: input.stepType,
        sessionData: input.sessionData,
        context: input.context,
      });

      // Step 2: Document Query (if needed)
      let documentResults: any = null;
      if (taskAnalysis.needsDocumentSearch) {
        console.log("\n=== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ===");
        processingSteps.push("‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£");
        sourcesUsed.push("‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£");

        documentResults = await this.documentQuerier.queryDocuments({
          query: taskAnalysis.processedTask,
          queryType: this.getDocumentQueryType(input.stepType),
          context: input.context || "",
        });

        confidence = Math.max(confidence, documentResults.confidence);
      }

      // Step 3: Information Search (if needed)
      let informationResults: any = null;
      if (taskAnalysis.needsInformationSearch) {
        console.log("\n=== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ===");
        processingSteps.push("‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å");
        sourcesUsed.push("‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å");

        informationResults = await this.informationSearcher.searchInformation({
          query: taskAnalysis.processedTask,
          context: input.context || "",
          searchType: this.getSearchType(input.stepType),
        });

        confidence = Math.max(confidence, informationResults.confidence);
      }

      // Step 4: Final Processing and Synthesis
      console.log("\n=== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ===");
      processingSteps.push("‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö");

      const finalResult = await this.synthesizeFinalResponse({
        taskAnalysis,
        documentResults,
        informationResults,
        originalInput: input,
      });

      console.log("‚úÖ Agentic Workflow ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      
      return {
        result: finalResult,
        confidence: Math.max(confidence, 0.5), // Ensure minimum confidence
        sourcesUsed,
        processingSteps,
      };

    } catch (error) {
      console.error("‚ùå Agentic Workflow Error:", error);
      
      return {
        result: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        confidence: 0.1,
        sourcesUsed: [],
        processingSteps: [...processingSteps, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"],
      };
    }
  }

  private async synthesizeFinalResponse(data: {
    taskAnalysis: any;
    documentResults: any;
    informationResults: any;
    originalInput: AgenticWorkflowInput;
  }): Promise<string> {
    const synthesisPrompt = ChatPromptTemplate.fromMessages([
      [
        "system",
        `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
        ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÑ‡∏ó‡∏¢
        
        ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á:
        1. ‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ
        2. ‡πÉ‡∏´‡πâ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        3. ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        4. ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
        5. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
        
        ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°: {responseFormat}`
      ],
      [
        "human",
        `‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°: {originalTask}
        ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô: {stepType}
        ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß: {processedTask}
        
        ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: {documentResults}
        ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {informationResults}
        
        ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô: {sessionContext}
        
        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°
        ‡∏ï‡πà‡∏≠‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÇ‡∏î‡∏¢‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
        ‡πÅ‡∏•‡∏∞‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÑ‡∏ó‡∏¢`
      ]
    ]);

    const formattedPrompt = await synthesisPrompt.format({
      originalTask: data.originalInput.task,
      stepType: data.originalInput.stepType,
      processedTask: data.taskAnalysis.processedTask,
      documentResults: JSON.stringify(data.documentResults || {}),
      informationResults: JSON.stringify(data.informationResults || {}),
      sessionContext: JSON.stringify(data.originalInput.sessionData || {}),
      responseFormat: data.taskAnalysis.responseFormat,
    });

    const response = await this.finalProcessor.invoke(formattedPrompt);
    return response.content as string;
  }

  private getDocumentQueryType(stepType: string): "curriculum" | "standard" | "guideline" | "template" {
    switch (stepType) {
      case "0":
        return "curriculum";
      case "1":
        return "standard";
      case "2":
      case "3":
        return "guideline";
      default:
        return "curriculum";
    }
  }

  private getSearchType(stepType: string): "educational" | "curriculum" | "methodology" | "general" {
    switch (stepType) {
      case "0":
      case "1":
        return "curriculum";
      case "2":
        return "methodology";
      case "3":
        return "educational";
      default:
        return "educational";
    }
  }
}
